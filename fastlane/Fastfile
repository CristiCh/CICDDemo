# Fastfile for Free Apple Developer Account
# This Fastfile automates testing, linting, building, archiving, and screenshots for the CICDDemo iOS app.
# It is designed to work with a free Apple Developer account and CI environments.
default_platform(:ios)

# === Parameterization ===
# Edit these variables to change configuration globally
WORKSPACE = ENV["WORKSPACE"] 
SCHEME = ENV["SCHEME"]
PROJECT = ENV["PROJECT"]
DEVICE = ENV["DEVICE"]
OUTPUT_DIR = ENV["OUTPUT_DIR"]
BUILDLOG_DIR = "#{OUTPUT_DIR}/#{ENV["BUILDLOG_DIR"]}"
SCREENSHOTS_DIR = "#{OUTPUT_DIR}/#{ENV["SCREENSHOTS_DIR"]}"
COVERAGE_DIR = "#{OUTPUT_DIR}/#{ENV["COVERAGE_DIR"]}"
DERIVEDDATA_DIR = ENV["DERIVEDDATA_DIR"]
LANGUAGES = ["en-US"]

platform :ios do
  # Runs before any lane. Sets up CircleCI environment if running in CI.
  before_all do
    setup_circle_ci if ENV['CI']
  end
  
  desc "Prints env variables"
  lane :debug_env do
    UI.header("Printing all ENV variables:")
    ENV.each do |key, value|
      UI.message("#{key}=#{value}")
    end
  end

  desc "Run tests and export screenshots"
  lane :test do
    UI.message("WORKSPACE: #{WORKSPACE}")
    UI.message("SCHEME: #{SCHEME}")
    UI.message("DEVICE: #{DEVICE}")
    UI.message("LANGUAGES: #{LANGUAGES}")
    UI.message("DESTINATION: #{DESTINATION}")
    UI.message("OUTPUT_DIR: #{OUTPUT_DIR}")
    UI.message("SCREENSHOTS_DIR: #{SCREENSHOTS_DIR}")
    UI.message("COVERAGE_DIR: #{COVERAGE_DIR}")
    UI.message("BUILDLOG_DIR: #{BUILDLOG_DIR}")
    UI.message("DERIVEDDATA_DIR: #{DERIVEDDATA_DIR}")
    
    # Runs unit tests (not UI tests) on iPhone 15 simulator, outputs results and logs
    run_tests(
      workspace: WORKSPACE,
      scheme: SCHEME,
      device: DEVICE,
      clean: true,
      code_coverage: false,
      destination: "platform=iOS Simulator,name=#{DEVICE},OS=latest",
      output_directory: OUTPUT_DIR,       # Screenshots and reports
      output_types: "junit,html",                # Output formats
      buildlog_path: BUILDLOG_DIR,
      derived_data_path: DERIVEDDATA_DIR,
      only_testing: ["#{SCHEME}Tests"] #Only run unit tests, skip UI tests "CICDDemoUITests"
     )
  end

  desc "Run SwiftLint"
  lane :lint do
    # Runs SwiftLint for code style checks using the config file
    swiftlint(
      mode: :lint,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: ".swiftlint.yml",
      strict: false
    )
  end

  desc "Build for simulator (no signing required)"
  lane :build_simulator do
    # Builds the app for iOS Simulator without code signing
    gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Debug",
      destination: DESTINATION,
      skip_codesigning: true,
      clean: false,
      derived_data_path: DERIVEDDATA_DIR,
    )
  end

  desc "Run all quality checks"
  lane :quality_check do
    # Runs lint, test, and build_simulator lanes in sequence
    lint
    test
    build_simulator
  end

  desc "Run tests and collect coverage report"
  lane :coverage do
    # Runs tests with code coverage enabled, then generates a coverage report with Slather
    run_tests(
      workspace: WORKSPACE,
      scheme: SCHEME,
      device: DEVICE,
      code_coverage: true,
      derived_data_path: DERIVEDDATA_DIR,
      output_directory: OUTPUT_DIR
    )
    slather(
      proj: PROJECT,
      scheme: SCHEME,
      workspace: WORKSPACE,
      output_directory: COVERAGE_DIR
    )
  end

  desc "Creates the ipa"
  lane :archive_development do
    # Archives the app for development (Debug config), increments build number, outputs a timestamped IPA
    UI.important("‚ö†Ô∏è  Requires a free Apple Developer account")
    timestamp = Time.now.strftime("%Y%m%d-%H%M%S")
    build_number = get_build_number(xcodeproj: PROJECT)
    new_build_number = build_number.to_i + 1

    increment_build_number(
      build_number: new_build_number.to_s,
      xcodeproj: PROJECT
    )

    ipa_path = gym(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Debug",
      export_method: "development",
      clean: true,
      include_bitcode: false,
      skip_profile_detection: true,
      output_directory: "./build",
      output_name: "CICDDemo_#{new_build_number}_#{timestamp}.ipa"
    )

    UI.success("‚úÖ Development archive created!")
    UI.message("üìã IPA location: #{ipa_path}")
  end

  desc "Capture UI screenshots using snapshot"
  lane :screenshots do
    # Captures UI screenshots for iPhone 15 in English, outputs to fastlane/artifacts/screenshots
    capture_screenshots(
      workspace: WORKSPACE,
      scheme: SCHEME,
      devices: [DEVICE],
      languages: LANGUAGES,
      clean: true,
      output_directory: SCREENSHOTS_DIR
    )
  end

  # Runs after any lane. Cleans build artifacts unless archiving. Prints success message.
  after_all do |lane|
    unless lane == :archive_development
      clean_build_artifacts
    end
    UI.success("‚úÖ Lane #{lane} completed successfully!")
  end

  # Handles errors in any lane. Prints error and cleans build artifacts.
  error do |lane, exception|
    UI.error("‚ùå Error in lane #{lane}: #{exception.message}")
    clean_build_artifacts
  end
end
