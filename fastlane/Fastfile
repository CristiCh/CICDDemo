# Fastfile for Free Apple Developer Account
default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci if ENV['CI']
  end

  desc "Run tests"
  lane :test do
    run_tests(
      workspace: "CICDDemo.xcworkspace",
      scheme: "CICDDemo",
      device: "iPhone 15",
      clean: true,
      code_coverage: false,
      destination: "platform=iOS Simulator,name=iPhone 15,OS=latest"
    )
  end

  desc "Run SwiftLint"
  lane :lint do
    swiftlint(
      mode: :lint,
      executable: "./Pods/SwiftLint/swiftlint",
      config_file: ".swiftlint.yml",
      strict: false  # Set to false initially to avoid build failures
    )
  end

  desc "Build for simulator (no signing required)"
  lane :build_simulator do
  	gym(
	    workspace: "CICDDemo.xcworkspace",
	    scheme: "CICDDemo",
	    configuration: "Debug",
	    destination: "platform=iOS Simulator,name=iPhone 15",
	    skip_codesigning: true,
	    clean: false,
	    derived_data_path: "./DerivedData",
  )
  end

  desc "Run all quality checks"
  lane :quality_check do
    lint
    test
    build_simulator
  end


  lane :coverage do
  run_tests(
    workspace: "CICDDemo.xcworkspace",
    scheme: "CICDDemo",
    device: "iPhone 15",
    code_coverage: true,
    derived_data_path: "./DerivedData"
  )
  
  slather(
    proj: "CICDDemo.xcodeproj",
    scheme: "CICDDemo",
    workspace: "CICDDemo.xcworkspace",
    # coveralls: true,   # or "coveralls", "codecov", etc.
  )
  end
  # desc "Generate code coverage report"
  # lane :coverage do
  #   run_tests(
  #     workspace: "CICDDemo.xcworkspace",
  #     scheme: "CICDDemo",
  #     device: "iPhone 15",
  #     code_coverage: true,
  #     derived_data_path: "./DerivedData"
  #   )
    
  #   # You can add tools like xcov here for better coverage reports
  #   xcov(
  #     workspace: "CICDDemo.xcworkspace",
  #     scheme: "CICDDemo",
  #     output_directory: "fastlane/test_output"
  #   )
  # end

  desc "Creates the ipa"
  lane :archive_development do
  UI.important("‚ö†Ô∏è  This requires a free Apple Developer account")
  UI.important("üì± You can only install on devices signed in with your Apple ID")

  # Generate a timestamp string like "20250701-153012" (yyyyMMdd-HHmmss)
  timestamp = Time.now.strftime("%Y%m%d-%H%M%S")
  build_number = get_build_number(xcodeproj: "CICDDemo.xcodeproj")
  new_build_number = build_number.to_i + 1

  increment_build_number(
  	build_number: new_build_number.to_s,
  	xcodeproj: "CICDDemo.xcodeproj"
)

  ipa_path = gym(
    workspace: "CICDDemo.xcworkspace",
    scheme: "CICDDemo",
    configuration: "Debug",
    export_method: "development",
    clean: true,
    include_bitcode: false,
    skip_profile_detection: true,
    output_directory: "./build",
    output_name: "CICDDemo_#{new_build_number.to_s}_#{timestamp}.ipa"
  )

  UI.success("‚úÖ Development archive created!")
  UI.message("üìã IPA location: #{ipa_path}")
end

  after_all do |lane|
  unless lane == :archive_development
    clean_build_artifacts
  end
  UI.success("‚úÖ Lane #{lane} completed successfully!")
end


  error do |lane, exception|
    UI.error("‚ùå Error in lane #{lane}: #{exception.message}")
    clean_build_artifacts
  end
end